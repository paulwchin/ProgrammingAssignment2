find.package("devtools")
install.packages("devtools")
install.packages("devtools")
find_rtools()
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
install.packages("swirl")
install.packages("swirl")
library("swirl")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x<-9
ls()
dir()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("mytest3.R",folder1,folder1)
file.path("mytest3.R")$folder1$folder2
file.path(folder1,folder1)
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"),recursive = TRUE)
unlink("testdir2", recursive = TRUE)
play()
dir.create(file.path("testdir2","testdir3"),recursive = TRUE)
unlink("testdir2", recursive = TRUE)
nxt()
setwd(old.dir)
unlink("testdir",recursive = TRUE)
1:20
pi:10
15:1
?`:`
play()
?':'
nxt()
seq(1,20)
seq(1,10,by=0.5)
seq(0,10,by=0.5)
seq(5,10,lengt=30)
seq(5,10,length.out=30)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect <- c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name <- c(my_char,"Paul Chin")
my_name
paste(my_name,collapse = " ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,sep="-")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
play()
tester <- c(3,5,1,10,12,6)
tester[tester %in% 1:5] <-0
tester
6 in 5
5 %in% 6
6 %in% 5
5 %in% 5
c(1:4) %in% 3
1:4 %in% 1:2
nxt()
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
library(swirl)
ls()
rm(list=ls())
swirl()
swirl()
library(swirl)
ls()
rm(list=ls())
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2)<-c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
play()
nxt()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, nrow =5)
my_matrix2 <- matrix(data=1:20, nrow = 4, nrow =5)
my_matrix2 <- matrix(1:20, nrow = 4, ncol =5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
library(swirl)
ls()
rm(list=ls())
?rm
swirl()
TRUE==TRUE
(FALSE==TRUE)==TRUE
(FALSE==TRUE)==false
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 & 4 >3.9
5 > 8 || 6 != 8 && 4 >3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <-sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
library(swirl)
ls()
rm(list=ls())
swirl()
library(swirl)
ls()
rm(list=ls())
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(std,c(1.4,3.6,7.9,8.8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
play()
evaluate
nxt()
?paste
paste("Programming","is","fun")
paste("Programming","is","fun!")
submit()
telgram("Hello", "World","Star","Hiphop")
telegram("Hello", "World","Star","Hiphop")
submit()
mad_libs(noun = "dog",adjective = "good",place="Germany")
submit()
submit()
submit()
'I' %p% 'love' %p%
'R!\'
f
5
\
\
+
>
'I' %p% 'love' %p% 'R!'
ls()
rm(list=ls)
rm(list=ls())
x <-1:10
if(x>5){x<-0}
wd
wd()
getwd()
rm(x)
z<-10
f(3)
source('C:/Users/Paul/OneDrive/Documents/f.R')
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
ls()
rm(list=ls())
str
?str
str(apply)
x <- array(rnorm(9000),30,5,20)
x <- array(rnorm(9000), c(30,5,20))
str(array)
dimnames(x) <- (,c("a","b","c","d","e"),)
str(dimnames)
rowSums
dimnames(x)
str(quantile)
dimnames(x)[,2]<-c("a","b","c","d","e")
dimnames(x)[2]<-c("a","b","c","d","e")
dimnames(x)[2]<-list(,c("a","b","c","d","e"),)
dimnames(x)[2]<-list(NULL,c("a","b","c","d","e"),NULL)
dimnames(x)
dimnames(x)[2]<-list(NULL,A,NULL)
dimnames(x)[2]<-list(NULL,"A",NULL)
dimnames(x)[2]<-list(NULL,10:14,NULL)
dimnames(x)<-list(NULL,10:14,NULL)
dimnames(x)
dimnames(x)<-list(1:10,c("a","b","c","d","e"),NULL)
dimnames(x)<-list(1:30,c("a","b","c","d","e"),NULL)
dimnames(x)
dimnames(x)[2]
dimnames(x)[2]<-5:1
dimnames(x)[2]<-c(5:1)
dimnames(x)[[2]]<-c(5:1)
dimnames(x)
unclass(dimnames(x))
?dimnames
dim(x)
array
x
rm(x)
noise <-function (n,mean,sd){}
rnorm(n,mean,sd)}
noise <-function (n,mean,sd){rnorm(n,mean,sd)}
noise(5,1,2)
noise(1:5,1:5,2)
rnorm
?rnorm
mapply(noise,1:5,1:5,2)
x <- c(rnorm(10), runif(10),rnorm(10,1))
?gl
f<gl(3,10)
f<-gl(3,10)
f
tapply(x,f,mean)
f
attributes(f)
attributes(x)
x
library(swirl)
ls()
rm(list=ls())
swirl()
rowSums
?rowSums
?colMeans
$
?$
library(datasets)
data(iris)
?iris
iris
head(iris)
s<-split(iris,iris$Species)
lapply(s,function(x)colMeans(x[,"Sepal.Length"]))
lapply(s,function(x)colMeans(x[,c("Petal.Length","Sepal.Length"]))
lapply(s,function(x)colMeans(x[,c("Petal.Length","Sepal.Length")]))
s
head(s)
s[1]
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
colMeans(iris)
rowMeans(iris[,1;4])
rowMeans(iris[,1:4])
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
apply(mtcars,2,mean)
split(mtcars,mtcars$cyl)
sapply(mtcars,cyl,mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
mtcars$mpg
mtcars$cyl
sapply(split(mtcars$hp,mtcars$cyl),mean)
=209.21429-82.63636
209.21429-82.63636
numeric
numeric()
setwd("C:/Users/Paul/Desktop/DataScience/RProgAssignment2/ProgrammingAssignment2")
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flags)
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,6,6))
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
uunique_vals
unique_vals
sapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numberic(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$populations,flags$red,summary)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
ls
rm(list=ls())
source('C:/Users/Paul/Desktop/DataScience/RProgAssignment2/ProgrammingAssignment2/makeVector.R')
source('C:/Users/Paul/Desktop/DataScience/RProgAssignment2/ProgrammingAssignment2/cachemean.R')
exampleX <- 30:50
makeVector(examleX)
makeVector(exampleX)
cachemean(exampleX)
exampleVect <- makeVector(exampleX)
cachemean(exampleVect)
